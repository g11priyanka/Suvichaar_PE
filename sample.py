from openai import AzureOpenAI
import streamlit as st
import os
import requests
from PIL import Image
import json
from utils import extract_article,extract_subtopics
import zipfile
import uuid
import io
def get_secret(key: str):
    try:
        return st.secrets[key]
    except Exception:
        return os.getenv(key)

api_key = get_secret("AZURE_API_KEY")
endpoint = get_secret("AZURE_ENDPOINT")

from openai import AzureOpenAI
client = AzureOpenAI(
    api_version="2024-02-01",
    api_key=api_key,
    azure_endpoint=endpoint
)


def generate_image_prompts_one_by_one(slides, art_style="vector-style flat illustration"):
    prompts = []
    for slide in slides:
        title = slide["title"]
        story = slide["story"]

        prompt = f"""
You are an expert DALL·E 3 image prompt engineer.

Create a symbolic, clean, creative image prompt for the following news slide.

Art Style: {art_style}
Mood: Calm, editorial, respectful.
Avoid: Graphic realism, distress, famous figures.

Slide Title: "{title}"
Slide Summary: "{story}"

Output ONLY the image prompt. No labels or titles.
"""
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt.strip()}]
        )

        content = response.choices[0].message.content.strip()
        if content.startswith("```"):
            content = content.split("```")[1].strip()

        prompts.append(content)

    return prompts



def generate_image_prompts(CharacterSketch,data_list, art_style="vector-style flat illustration"):
    f"""
    The story/itinerary has been generated from the perspective of {CharacterSketch}.
    First study the whole {data_list} and get an overall idea of the story and then generate symbolic image prompts from the a list of title-content pairs which were generated by .

    Args:
        data_list: List of dictionaries, each with 'title' and 'content' keys.
        art_style: {art_style}

    Returns:
        List of DALL·E-style image prompts.
    """
    prompts = []

    for item in data_list:
        title = item["title"]
        story = item["story"]

        prompt_text = f"""
You are an expert DALL·E 3 image prompt engineer.

Use the following title and context to write a symbolic, creative image prompt that visually represents the essence of the content.

Art Style: {art_style}
Mood: Calm, editorial, respectful.
Avoid: Graphic realism, distress, famous figures,non sexual.

Title: "{title}"

Context:
\"\"\"
{story}
\"\"\"

Output ONLY the image prompt. No labels or titles.
"""

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt_text.strip()}]
        )

        result = response.choices[0].message.content.strip()
        if result.startswith("```"):
            result = result.split("```")[1].strip()

        prompts.append(result)

    return prompts

def generate_and_save_images_azure(prompts, client, model_name="dall-e-3", output_dir="images"):
    """
    Generates and saves images from a list of prompts using Azure DALL-E client.
    
    Args:
        prompts (List[str]): A list of image generation prompts.
        client: Azure OpenAI client with image generation capability.
        model_name (str): The name of the deployed DALL-E model on Azure.
        output_dir (str): Directory where images will be saved.

    Returns:
        List[str]: List of paths to the saved image files.
    """
    os.makedirs(output_dir, exist_ok=True)
    saved_paths = []

    for idx, prompt in enumerate(prompts, start=1):
        try:
            print(f"Generating image {idx}...")

            result = client.images.generate(
                model=model_name,
                prompt=prompt,
                n=1
            )

            json_response = json.loads(result.model_dump_json())
            image_url = json_response["data"][0]["url"]

            image_path = os.path.join(output_dir, f"{uuid.uuid4().hex[:8]}_slide_{idx}.png")
            image_data = requests.get(image_url).content

            with open(image_path, "wb") as f:
                f.write(image_data)

            print(f"Saved: {image_path}")
            saved_paths.append(image_path)

        except Exception as e:
            print(f"❌ Error generating image {idx}: {e}")

    return saved_paths

def zip_images_in_memory(image_files):
    """
    Zips image files into memory (BytesIO) and returns the BytesIO object and a random filename.
    
    Returns:
        tuple (zip_buffer: BytesIO, zip_filename: str)
    """
    zip_buffer = io.BytesIO()
    zip_name = f"{uuid.uuid4().hex[:8]}_images.zip"

    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
        for img_path in image_files:
            with open(img_path, "rb") as img_file:
                img_data = img_file.read()
                zipf.writestr(os.path.basename(img_path), img_data)

    zip_buffer.seek(0)  # Important: move cursor to start for download
    return zip_buffer, zip_name


def generate_scientific_image_prompts(CharacterSketch, data_list, art_style="clean vector-style educational diagram"):
    prompts = []

    for item in data_list:
        title = item["title"]
        content = item["content"]

        # Start with the text-removal constraint
        safe_intro = "No text, no labels, no numbers, no letters, no writing of any kind."

        prompt_text = f"""
{safe_intro}
Create a detailed, scientifically accurate {art_style} for a high school student.

Topic: {title}
Description: {content}

The image should:
- Show the concept in a realistic, clear scene.
- Include only physical objects and phenomena, no symbolic or surreal elements.
- Use accurate scientific representation.
- Avoid any humans, animals, or anthropomorphic features.
- Use a side-view perspective if helpful for clarity.
"""

        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You create safe, visually clear, scientifically accurate prompts for image generation. Always ensure no text, labels, numbers, or letters appear in the generated image."},
                    {"role": "user", "content": prompt_text.strip()}
                ],
                temperature=0.7
            )

            result = response.choices[0].message.content.strip()
            prompts.append(result)

        except Exception as e:
            print(f"Error generating prompt for '{title}': {e}")
            prompts.append(f"[Prompt blocked or failed for: {title}]")

    return prompts

